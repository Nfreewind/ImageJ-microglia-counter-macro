//CHANGE USER SETTINGS HERE
//Threshold settings for initial IBA1 and DAPI image segmentation:
iba_upper_thresh = 255;
iba_lower_thresh = 26;
dapi_upper_thresh = 255;
dapi_lower_thresh = 23;
//Threshold for nuclear overlap:
nuclear_overlap_thresh = 0.55;
//Set scale settings:
distance_in_pixels = 1177;
known_distance = 300;
pixel_aspect_ratio = 1;
unit = "um"; //using microns[um] as length unit is strongly suggested due to conversion factor in results table

//set default color to black, set scale 1:1, clear results window
run("Set Scale...", "distance="+distance_in_pixels+" known="+known_distance+" pixel="+pixel_aspect_ratio+" unit="+unit+" global");
run("Clear Results");

//get filenames and mean values to establish which image is dapi and iba
//darker image will be dapi; brighter image will be iba
selectImage(1);
img1 = getInfo("image.filename");
getStatistics(area, mean);
first = mean;
selectImage(2);
img2 = getInfo("image.filename");
getStatistics(area, mean);
second = mean;

iba = "";
dapi = "";
if (first>second){
	iba = img1;
	dapi = img2;
}
if (second>first){
	iba = img2;
	dapi = img1;
}
//remember full paths for original images
iba_dir = File.directory+iba; 
dapi_dir = File.directory+dapi;

//substract background noise from iba 
selectImage(iba);
getStatistics(area, mean);
run("Subtract...", "value=mean");
//threshold iba
setAutoThreshold("Otsu dark");
setThreshold(iba_lower_thresh, iba_upper_thresh);
setOption("BlackBackground", false);
run("Convert to Mask");
//fill holes and analyze particles in iba
run("Fill Holes");
run("Analyze Particles...", "size=300-Infinity pixel show=Masks clear include in_situ");

//substract background noise from dapi
selectImage(dapi);
getStatistics(area, mean);
run("Subtract...", "value=mean");
//threshold dapi
setAutoThreshold("Otsu dark");
run("Threshold...");
setThreshold(dapi_lower_thresh, dapi_upper_thresh);
run("Convert to Mask");
//fill holes, watershed and analyze particles in dapi
run("Fill Holes");
run("Watershed");
//analyze partcles will add all nuclei from dapi to ROI manager
run("Analyze Particles...", "size=300-Infinity pixel show=Masks clear include add in_situ");

//create stack, divide both stack images by 2 and Z project
run("Images to Stack", "name=Stack title=[] use");
run("Divide...", "value=2.000 stack");
run("Z Project...", "projection=[Average Intensity]");
selectWindow("Stack");
close();
selectWindow("AVG_Stack");
run("Invert LUT");


run("Clear Results");
selectWindow("AVG_Stack");
nROI = roiManager("count");
roi_array = newArray();
overlap_array = newArray();

//select each nucleus from ROI manager
for (i=0; i<nROI; i++){
	roiManager("select", i);
	getStatistics(area, mean, min, max);
	//if max intensity less than 128 - remove
	if (max<128){
		run("Cut");
	}
	//if max intensity is 128, calculate dapi/iba overlap
	if (max==128){
		overlap = (mean-64)/64;
		//if overlap is more than threshold value, add the ROI index and overlap fraction
		//to table. draw overlap values on image
		if (overlap>nuclear_overlap_thresh){
			overlap_array = Array.concat(overlap_array, overlap);
			roi_index = roiManager("index");
			roi_array = Array.concat(roi_array, roi_index);
			Roi.getBounds(x, y, width, height); 
    	    setFont("SanSerif", 16, "antialiased");
    		Overlay.drawString(overlap, x, y-10);
		}	
	}
//show drawn overlap values
Overlay.show;
}
//show table with nucleus ROI index, overlap values and total number of doule-positive cells
index = Array.getSequence(roi_array.length+1);
index = Array.slice(index,1,index.length);
Array.show("Cells found", index, roi_array, overlap_array);

//create stack with processed image and two original images
open(iba_dir);
open(dapi_dir);
run("Images to Stack", "name=Stack title=[] use");
//make results window with stats
getStatistics(area);
nIBA = roi_array.length;
run("Clear Results");
setResult("Iba1-count", 0, nIBA);
setResult("DAPI-count", 0, nROI);
setResult("Iba1 %", 0, nIBA/nROI*100);
setResult("Iba1 density (per mm2)", 0, nIBA/area*1000000);
setResult("DAPI density (per mm2)", 0, nROI/area*1000000);
setOption("ShowRowNumbers", false);
updateResults;
macro "Microglia counter [1]" {

MG_distance_in_pixels = parseInt(call("ij.Prefs.get",   
"MG.distance_in_pixels","1177"));
MG_known_distance = parseInt(call("ij.Prefs.get",   
"MG.known_distance","300"));
MG_pixel_aspect_ratio = parseInt(call("ij.Prefs.get",   
"MG.pixel_aspect_ratio","1"));
MG_unit = call("ij.Prefs.get",   
"MG.unit","um");
MG_iba_threshold = parseFloat(call("ij.Prefs.get",   
"MG.iba_threshold","2.4"));
MG_dapi_threshold = parseFloat(call("ij.Prefs.get",   
"MG.dapi_threshold","9.4"));
MG_overlap = parseFloat(call("ij.Prefs.get",   
"MG.overlap","0.55"));
MG_iba_cell_size_l = parseFloat(call("ij.Prefs.get",   
"MG.iba_cell_size_l","300"));
MG_iba_cell_size_u = parseFloat(call("ij.Prefs.get",   
"MG.iba_cell_size_u","Infinity"));
MG_dapi_cell_size_l = parseFloat(call("ij.Prefs.get",   
"MG.dapi_cell_size_l","300"));
MG_dapi_cell_size_u = parseFloat(call("ij.Prefs.get",   
"MG.dapi_cell_size_u","Infinity"));
MG_directory = call("ij.Prefs.get",   
"MG.directory","");
MG_tablename = call("ij.Prefs.get",   
"MG.tablename","");
MG_savedir = call("ij.Prefs.get",   
"MG.savedir","Yes");

//set scale, clear results window
run("Set Scale...", "distance="+MG_distance_in_pixels+" known="+MG_known_distance+" pixel="+MG_pixel_aspect_ratio+" unit="+MG_unit+" global");
run("Clear Results");

//get filenames and mean values to establish which image is dapi and iba
//darker image will be dapi; brighter image will be iba
selectImage(1);
img1 = getInfo("image.filename");
getStatistics(area, mean);
first = mean;
selectImage(2);
img2 = getInfo("image.filename");
getStatistics(area, mean);
second = mean;

iba = "";
dapi = "";
if (first>second){
	iba = img1;
	dapi = img2;
}
if (second>first){
	iba = img2;
	dapi = img1;
}
//remember full paths for original images
iba_dir = File.directory+iba; 
dapi_dir = File.directory+dapi;

//substract background noise from iba 
selectImage(iba);
getStatistics(area, mean);
run("Subtract...", "value=mean");
//threshold iba
setAutoThreshold("Otsu dark");
setThreshold(lower_threshold(MG_iba_threshold), 255);
setOption("BlackBackground", false);
run("Convert to Mask");
//fill holes and analyze particles in iba
run("Fill Holes");
run("Analyze Particles...", "size="+MG_iba_cell_size_l+"-"+MG_iba_cell_size_u+" pixel show=Masks clear include in_situ");

//substract background noise from dapi
selectImage(dapi);
getStatistics(area, mean);
run("Subtract...", "value=mean");
//threshold dapi
setAutoThreshold("Otsu dark");
run("Threshold...");
setThreshold(lower_threshold(MG_dapi_threshold), 255);
run("Convert to Mask");
//fill holes, watershed and analyze particles in dapi
run("Fill Holes");
run("Watershed");
//analyze partcles will add all nuclei from dapi to ROI manager
run("Analyze Particles...", "size="+MG_dapi_cell_size_l+"-"+MG_dapi_cell_size_u+" pixel show=Masks clear include add in_situ");

//create stack, divide both stack images by 2 and Z project
run("Images to Stack", "name=Stack title=[] use");
run("Divide...", "value=2.000 stack");
run("Z Project...", "projection=[Average Intensity]");
selectWindow("Stack");
close();
selectWindow("AVG_Stack");
run("Invert LUT");


run("Clear Results");
selectWindow("AVG_Stack");
nROI = roiManager("count");
roi_array = newArray();
overlap_array = newArray();

//select each nucleus from ROI manager
for (i=0; i<nROI; i++){
	roiManager("select", i);
	getStatistics(area, mean, min, max);
	//if max intensity less than 128 - remove
	if (max<128){
		run("Cut");
	}
	//if max intensity is 128, calculate dapi/iba overlap
	if (max==128){
		overlap = (mean-64)/64;
		//if overlap is more than threshold value, add the ROI index and overlap fraction
		//to table. draw overlap values on image
		if (overlap>MG_overlap){
			overlap_array = Array.concat(overlap_array, overlap);
			roi_index = roiManager("index");
			roi_array = Array.concat(roi_array, roi_index);
			Roi.getBounds(x, y, width, height); 
    	    setFont("SanSerif", 16, "antialiased");
    		Overlay.drawString(overlap, x, y-10);
		}	
	}
//show drawn overlap values
Overlay.show;
}

//create stack with processed image and two original images
open(iba_dir);
open(dapi_dir);
run("Images to Stack", "name=Stack title=[] use");

//make results window with stats
getStatistics(area);
nIBA = roi_array.length;
run("Clear Results");
setResult("Iba1-count", 0, nIBA);
setResult("DAPI-count", 0, nROI);
setResult("Iba1 %", 0, nIBA/nROI*100);
setResult("Iba1 density (per mm2)", 0, nIBA/area*1000000);
setResult("DAPI density (per mm2)", 0, nROI/area*1000000);
setOption("ShowRowNumbers", false);
updateResults;

selectWindow("ROI Manager"); 
run("Close"); 
selectWindow("Threshold"); 
run("Close"); 

//if user set to save measurements, append results to the user defined file

full_path = MG_directory+MG_tablename+".txt"; //full path of the user defined file
twname = MG_tablename+".txt";
tname = "["+twname+"]";
getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);

//Check if .txt file exists in user defined directory
if (MG_savedir == "Yes"){
	if (!File.exists(full_path)){ //if file does not exist -> create new file
		tfile = File.open(full_path);
		//print(tfile);
		//run("Text File... ", "open="+full_path+"");
		print(tfile, "Filenames,Timestamp,Iba1-count,DAPI-count,Iba1 %,Iba1 density,DAPI density");//write headers to file
		File.close(tfile);
		run("Text File... ", "open="+full_path+"");
		results =dapi_dir+"\n"+ iba_dir+","+dayOfMonth+"-"+month+1+"-"+year+" ; "+hour+":"+minute+","+toString(nIBA)+","+toString(nROI)+","+toString(nIBA/nROI*100)+","+toString(nIBA/area*1000000)+","+toString(nROI/area*1000000);
		print (tname, results);
		selectWindow(twname); 
		content = getInfo("window.contents");
		print(tname, "\\Close");
		tfile = File.open(full_path);
 		print(tfile, content);
 		File.close(tfile);
	}
	else {
		run("Text File... ", "open="+full_path+"");
		results = dapi_dir+"\n"+ iba_dir+","+dayOfMonth+"-"+month+1+"-"+year+" ; "+hour+":"+minute+","+toString(nIBA)+","+toString(nROI)+","+toString(nIBA/nROI*100)+","+toString(nIBA/area*1000000)+","+toString(nROI/area*1000000);
		print (tname, results);
		selectWindow(twname); 
		content = getInfo("window.contents");
		print(tname, "\\Close");
		tfile = File.open(full_path);
 		print(tfile, content);
 		File.close(tfile);
	}
}


function lower_threshold(percent_threshold){

	h = getHeight(); 
	w = getWidth(); 
	n = w*h; 
	nBins = 256; 
	histMin = 0; 
	histMax = 255; 
	getHistogram(values, counts, nBins); 
	cum = newArray(nBins); 
	cum[0] = counts[0]; 
	cdf = newArray(nBins); 
	cdf[0] = cum[0]/n; 
	fBin = 0;
	for (i = (histMin + 1); i < (histMax + 1); i++){ 
        	cum[i] = counts[i] + cum[i-1]; 
        	cdf[i] = cum[i]/n; 
        	percent = cdf[i]*100;
        	if ((100-percent)>=percent_threshold){
				fBin = i;
			}
	} 
	return fBin;
}
}

macro "Settings for microglia counter [0]" {

MG_distance_in_pixels = parseInt(call("ij.Prefs.get",   
"MG.distance_in_pixels","1177"));
MG_known_distance = parseInt(call("ij.Prefs.get",   
"MG.known_distance","300"));
MG_pixel_aspect_ratio = parseInt(call("ij.Prefs.get",   
"MG.pixel_aspect_ratio","1"));
MG_unit = call("ij.Prefs.get",   
"MG.unit","um");
MG_iba_threshold = parseFloat(call("ij.Prefs.get",   
"MG.iba_threshold","2.4"));
MG_dapi_threshold = parseFloat(call("ij.Prefs.get",   
"MG.dapi_threshold","9.4"));
MG_overlap = parseFloat(call("ij.Prefs.get",   
"MG.overlap","0.55"));
MG_iba_cell_size_l = parseFloat(call("ij.Prefs.get",   
"MG.iba_cell_size_l","300"));
MG_iba_cell_size_u = parseFloat(call("ij.Prefs.get",   
"MG.iba_cell_size_u","Infinity"));
MG_dapi_cell_size_l = parseFloat(call("ij.Prefs.get",   
"MG.dapi_cell_size_l","300"));
MG_dapi_cell_size_u = parseFloat(call("ij.Prefs.get",   
"MG.dapi_cell_size_u","Infinity"));
MG_directory = call("ij.Prefs.get",   
"MG.directory","");
MG_tablename = call("ij.Prefs.get",   
"MG.tablename","");
MG_savedir = call("ij.Prefs.get",   
"MG.savedir","Yes");

   Dialog.create("Microglia Counter Settings"); 
   Dialog.addMessage("Scaling settings")
   Dialog.addNumber("Distance in pixels", MG_distance_in_pixels,0,6,"px"); 
   Dialog.addNumber("Known distance", MG_known_distance,0,6,""); 
   Dialog.addNumber("Pixel aspect ratio", MG_pixel_aspect_ratio,0,6,""); 
   Dialog.addString("Units", MG_unit,6); 
   Dialog.addMessage("-----------------------------------------------------------------------------------------------------");
   Dialog.addMessage("Threshold settings\nOpen 'Threshold settings' to determine the best threshold % value");
   Dialog.addNumber("Iba1 threshold", MG_iba_threshold,2,6,"%"); 
   Dialog.addNumber("DAPI threshold", MG_dapi_threshold,2,6,"%"); 
   Dialog.addMessage("-----------------------------------------------------------------------------------------------------");
   Dialog.addMessage("Overlap settings\nAdjust the overlap ratio 0.00-1.00");
   Dialog.addNumber("Overlap", MG_overlap,2,6,""); 
   Dialog.addMessage("-----------------------------------------------------------------------------------------------------");
   Dialog.addMessage("Cell size settings\nOpen 'Analyze particles' to determine the best size");
   Dialog.addNumber("Iba1 lower limit", MG_iba_cell_size_l,2,6,""); 
   Dialog.addNumber("Iba1 upper limit", MG_iba_cell_size_u,2,6,""); 
   Dialog.addNumber("DAPI lower limit", MG_dapi_cell_size_l,2,6,""); 
   Dialog.addNumber("DAPI upper limit", MG_dapi_cell_size_u,2,6,""); 
   Dialog.addMessage("-----------------------------------------------------------------------------------------------------");
   Dialog.addMessage("Output settings");
   items = newArray("Yes", "No");
   Dialog.addRadioButtonGroup("Save measurements?", items, 1, 2, MG_savedir);
   Dialog.show(); 
   MG_distance_in_pixels = Dialog.getNumber(); 
   MG_known_distance = Dialog.getNumber(); 
   MG_pixel_aspect_ratio = Dialog.getNumber(); 
   MG_unit = Dialog.getString(); 
   MG_iba_threshold = Dialog.getNumber();
   MG_dapi_threshold = Dialog.getNumber();
   MG_overlap = Dialog.getNumber();
   MG_iba_cell_size_l = Dialog.getNumber();
   MG_iba_cell_size_u = Dialog.getNumber();
   MG_dapi_cell_size_l = Dialog.getNumber();
   MG_dapi_cell_size_u = Dialog.getNumber();
   MG_savedir = Dialog.getRadioButton();
   
   if (MG_savedir == "Yes"){
   		MG_directory = getDirectory("Choose where to save measurements");
   		Dialog.create("Measurements filename");
   		Dialog.addString("File name (without spaces)", MG_tablename,7); 
   		Dialog.addToSameRow();
   		Dialog.addMessage(".txt");
   		Dialog.show(); 
   		MG_tablename = Dialog.getString();
   }
   
call("ij.Prefs.set", "MG.distance_in_pixels",toString 
(MG_distance_in_pixels)); 
call("ij.Prefs.set", "MG.known_distance",toString 
(MG_known_distance));
call("ij.Prefs.set", "MG.pixel_aspect_ratio",toString 
(MG_pixel_aspect_ratio)); 
call("ij.Prefs.set", "MG.unit",toString 
(MG_unit)); 
call("ij.Prefs.set", "MG.iba_threshold",toString 
(MG_iba_threshold));
call("ij.Prefs.set", "MG.dapi_threshold",toString 
(MG_dapi_threshold)); 
call("ij.Prefs.set", "MG.overlap",toString 
(MG_overlap)); 
call("ij.Prefs.set", "MG.iba_cell_size_l",toString 
(MG_iba_cell_size_l)); 
call("ij.Prefs.set", "MG.iba_cell_size_u",toString 
(MG_iba_cell_size_u)); 
call("ij.Prefs.set", "MG.dapi_cell_size_l",toString 
(MG_dapi_cell_size_l)); 
call("ij.Prefs.set", "MG.dapi_cell_size_u",toString 
(MG_dapi_cell_size_u)); 
call("ij.Prefs.set", "MG.tablename",toString 
(MG_tablename));
call("ij.Prefs.set", "MG.savedir",toString 
(MG_savedir));
call("ij.Prefs.set", "MG.directory",toString 
(MG_directory));

}